name: Build-Test

# Builds GCC and runs the testsuite.
# If the testsuite run times out, the build/test gets re-run on a self-hosted runner.

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
      target:
        required: true
        type: string
      gcchash:
        required: true
        type: string
      multilib:
        required: true
        type: string
      multitarget:
        required: false
        type: string
      run_on_self_hosted:
        required: true
        type: string

jobs:
  check:
    runs-on: ubuntu-20.04
    environment: production
    steps:
      - name: Early exit
        if: ${{ inputs.multitarget != '' && !contains(inputs.multitarget, format('{0}:{1}', inputs.mode, inputs.target)) }}
        id: early-exit
        run: |
          export EARLY_EXIT="exit"
          echo "early_exit=$EARLY_EXIT" >> "$GITHUB_OUTPUT"

    outputs:
      early_exit: ${{ steps.early-exit.outputs.early_exit }}

  build:
    runs-on: ubuntu-20.04
    environment: production
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    needs: [check]
    if: ${{ needs.check.outputs.early_exit != 'exit' && inputs.run_on_self_hosted != 'true' }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: true

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.gcchash }}
          path: riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Print gcc hash
        run: |
          cd gcc
          git rev-parse HEAD

      - name: Make log name
        id: build-log
        run: |
          export BUILD_LOG_NAME=${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}-build-log
          echo "build_log_name=$BUILD_LOG_NAME" >> $GITHUB_OUTPUT

      - name: Build gcc
        id: build-status
        uses: ./.github/actions/common/build-target
        with:
          multilib_target_string: 'rv64gc-lp64d--;rv32gc-ilp32d--'
          build_log_name: ${{ steps.build-log.outputs.build_log_name }}
          upload_stage2_artifacts: 'true'
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.gcchash }}
          multilib: ${{ inputs.multilib }}

    outputs:
      build_success: ${{ steps.build-status.outputs.build_success }}

  test:
    runs-on: ubuntu-20.04
    environment: production
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    needs: [check, build]
    # Skip linux multilib
    if: ${{ needs.check.outputs.early_exit != 'exit' && inputs.run_on_self_hosted != 'true' }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: true

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.gcchash }}
          path: riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Print gcc hash
        run: |
          cd gcc
          git rev-parse HEAD

      - name: Install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Configure
        run: |
          mkdir build
          cd build
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            ../configure --prefix=$(pwd) --with-multilib-generator="rv64gc-lp64d--;rv32gc-ilp32d--"
          else
            TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
            ../configure --prefix=$(pwd) --with-multilib-generator="${TARGET_TUPLE[0]}-${TARGET_TUPLE[1]}--"
          fi

      - name: Restore Stage2 Artifacts
        uses: ./.github/actions/common/restore-stage-2
        with:
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.gcchash }}
          multilib: ${{ inputs.multilib }}

      - name: Run Testsuite
        uses: ./.github/actions/common/run-testsuite
        with:
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.gcchash }}
          multilib: ${{ inputs.multilib }}


  # The self-hosted environment does not have the same path setup as the hosted runners
  # We need to rebuild since restoring the artifact won't work
  # (the new path will break the existing build).
  rerun-timeouts:
    runs-on: self-hosted
    environment: production
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    needs: [check, build, test]
    if: ${{ failure() && needs.build.outputs.build_success == 'success' && inputs.run_on_self_hosted != 'true' }}
    timeout-minutes: 1440 # 24 hours
    steps:
      - name: 'Cleanup build folder'
        working-directory: ./
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: false

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.gcchash }}
          path: riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Print gcc hash
        run: |
          cd gcc
          git rev-parse HEAD

      - name: Install dependencies
        run: |
          sudo ./.github/setup-apt.sh
          sudo apt install python3 -y
          sudo apt install python-is-python3 -y

      - name: Configure
        run: |
          mkdir build
          cd build
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            ../configure --prefix=$(pwd) --with-multilib-generator="rv64gc-lp64d--;rv32gc-ilp32d--"
          else
            TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
            ../configure --prefix=$(pwd) --with-multilib-generator="${TARGET_TUPLE[0]}-${TARGET_TUPLE[1]}--"
          fi

      - name: Build
        run: |
          cd build
          make ${{ inputs.mode }} -j $(nproc)

      - name: Run Testsuite
        uses: ./.github/actions/common/run-testsuite
        with:
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.gcchash }}
          multilib: ${{ inputs.multilib }}


  # The self-hosted environment does not have the same path setup as the hosted runners
  # We need to rebuild since restoring the artifact won't work
  # (the new path will break the existing build).
  run-on-self-hosted:
    runs-on: self-hosted
    environment: production
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    needs: [check]
    if: ${{ needs.check.outputs.early_exit != 'exit' && inputs.run_on_self_hosted == 'true' }}
    timeout-minutes: 1440 # 24 hours
    steps:
      - name: 'Cleanup build folder'
        working-directory: ./
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: false

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.gcchash }}
          path: riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.gcchash }}

      - name: Make log name
        id: build-log
        run: |
          export BUILD_LOG_NAME=${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}-build-log
          echo "build_log_name=$BUILD_LOG_NAME" >> $GITHUB_OUTPUT

      # Don't upload stage 2 artifacts on self-hosted runners
      # in interest of resources

      # rv32gcv-ilp32d, # rv32 vector
      # rv64gcv-lp64d, # rv64 vector
      # rv64gcv_zvbb_zvbc_zvkg_zvkn_zvknc_zvkned_zvkng_zvknha_zvknhb_zvks_zvksc_zvksed_zvksg_zvksh_zvkt-lp64d, # rv64 vector crypto
      # rv64imafdcv_zicond_zawrs_zbc_zvkng_zvksg_zvbb_zvbc_zicsr_zba_zbb_zbs_zicbom_zicbop_zicboz_zfhmin_zkt-lp64d, # RVA23U64 profile with optional extensions, excluding unsupported extensions
      - name: Build gcc
        id: build-status
        uses: ./.github/actions/common/build-target
        with:
          multilib_target_string: 'rv32gcv-ilp32d--;rv64gcv-lp64d--;rv64gcv_zvbb_zvbc_zvkg_zvkn_zvknc_zvkned_zvkng_zvknha_zvknhb_zvks_zvksc_zvksed_zvksg_zvksh_zvkt-lp64d--;rv64imafdcv_zicond_zawrs_zbc_zvkng_zvksg_zvbb_zvbc_zicsr_zba_zbb_zbs_zicbom_zicbop_zicboz_zfhmin_zkt-lp64d--'
          build_log_name: ${{ steps.build-log.outputs.build_log_name }}
          upload_stage2_artifacts: 'false'
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.gcchash }}
          multilib: ${{ inputs.multilib }}

      - name: Run Testsuite
        uses: ./.github/actions/common/run-testsuite
        with:
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.gcchash }}
          multilib: ${{ inputs.multilib }}
